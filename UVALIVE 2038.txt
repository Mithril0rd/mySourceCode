#include <cstdio>
#include <cstring>
#include <vector>
#include <algorithm>

using namespace std; 

const int MAX_N = 1501;

int n;
vector<int> G[MAX_N];
int dp[MAX_N][2];
bool vis[MAX_N];

void addedge(int u, int v) {
	 G[u].push_back(v);
	 G[v].push_back(u);	 
}
int dfs(int fa) {
	vis[fa] = true;
	dp[fa][0] = 0;
	dp[fa][1] = 1;
	int len = G[fa].size();
	for (int i = 0; i < len; ++i) {
		int v = G[fa][i];
		if (vis[v]) continue;
 	//	if (v == fa) continue;
		dfs(v);
  		dp[fa][0] += dp[v][1];
  		dp[fa][1] += min(dp[v][0], dp[v][1]);
	}
	return min(dp[fa][0], dp[fa][1]);
}

void solve() {
	 memset(vis, false, sizeof vis);
  	 int ans = 0;
  	 for (int i = 0; i < n; ++i) {
  	  	 if (vis[i]) continue;
  	 	 dfs(i);
 		 ans += min(dp[i][0], dp[i][1]);
  	 }
  	 printf("%d\n", ans);
}

int main() {
	while (1 == scanf("%d", &n)) {
		  memset(G, 0, sizeof G);
		  char str[11];
		  for (int i = 0; i < n; ++i) {
		  	  scanf("%s", str);	  
  	    	  int u, v, x;
  	    	  sscanf(str, "%d:(%d)", &u, &x);
 		      for (int j = 0; j < x; ++j) {
         	  	  scanf("%d", &v);
   		    	  addedge(u, v);
 		      }
		  } 
 	  	  solve();
	}
	return 0;
} 