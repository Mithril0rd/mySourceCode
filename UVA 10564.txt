#include <cstdio>
#include <cstring>

const int MAX_N = 51;
const int INF = 0x3f3f3f3f; 

int n, s;

int num[MAX_N][MAX_N >> 1];
long long dp[MAX_N * 10][MAX_N][MAX_N >> 1];

void solve() {
	 memset(dp, 0, sizeof dp);
  	 for (int i = 1; i <= n; ++i) {
  	  	 dp[num[2 * n - 1][i]][2 * n - 1][i] = 1;
  	 }
  	 for (int i = 2 * n - 2; i >= 1; --i) {
  	 	 if (i < n) {
  		  	   for (int j = 1; j <= n + 1 - i; ++j) {
 	   		   	   for (int k = 0; k <= s; ++k) {
   		   	   	   	   if (k + num[i][j] <= s) {
       		          	  dp[k + num[i][j]][i][j] += dp[k][i + 1][j] + dp[k][i + 1][j - 1];
   		   	   	   	   }
 	   		   	   }
  		  	   }
	     } else {
		      	for (int j = 1; j <= i + 1 - n; ++j) {
       	 			for (int k = 0; k <= s; ++k) {
	 		   	 		if (k + num[i][j] <= s) {
  		   	 	 		   dp[k + num[i][j]][i][j] += dp[k][i + 1][j] + dp[k][i + 1][j + 1];
	 		   	 		}
       	 			}
		      	}
	     }
  	 }
	 long long ans = 0;
	 int idx = INF;
  	 for (int i = 1; i <= n; ++i) {
  	 	 if (dp[s][1][i] > 0) {
	 	 	ans += dp[s][1][i];
 	   		if (idx == INF) idx = i;
  	 	 }
  	 }
  	 printf("%lld\n", ans);
  	 if (idx != INF) {
  	  	
 	 	printf("%d ", idx - 1);
	   	int sum = s - num[1][idx];
	   	for (int i = 2; i <= 2 * n - 1; ++i) {
  		 //	printf("(%d %d)\n", i, sum);
	 		if (i <= n) {
	  		   if (dp[sum][i][idx - 1] > 0) {
	       	   	  printf("L");
      	          sum -= num[i][--idx];
	  		   } else {
  			   	 printf("R");
				  sum -= num[i][idx]; 
	  		   }
	 		} else { 
   			  if (dp[sum][i][idx] > 0) {
	       	  	 printf("L");
				 sum -= num[i][idx]; 
   			  } else {
  		   	  	printf("R");
  		   		sum -= num[i][++idx];
   			  }
	 		}
	   	}
		   	
  	 }
  	 puts(""); 
}

int main() {
	while (2 == scanf("%d%d", &n, &s)) {
    	  if (n == 0 && s == 0) break;
  	      for (int i = 1; i <= 2 * n - 1; ++i) {
  	      	  if (i < n) {
              	 for (int j = 1; j <= n + 1 - i; ++j) {
              	  	 scanf("%d", &num[i][j]);
              	 }
  	      	  } else {
		  		 for (int j = 1; j <= i + 1 - n; ++j) {
 	  	  		 	 scanf("%d", &num[i][j]);
		  		 }
  	      	  }
  	      }
       	  solve();
	}
	return 0;
} 