#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

const int MAX_N = 101;
const int MAX_U = 51;
const int INF = 0x3f3f3f;

int n;
char str[MAX_N];
int dp[MAX_N][MAX_U][2];

void solve() {
	int len = strlen(str);
	for (int i = 0; i <= len; ++i) {
		for (int j = 0; j <= n; ++j) {
			for (int k = 0; k < 2; ++k) {
				dp[i][j][k] = -INF;
			}
		}
	}
	dp[0][0][0] = dp[0][0][1] = 0;
	
	for (int i = 0; i < len; ++i) {
		for (int j = 0; j <= n; ++j) {
			for (int k = 0; k < 2; ++k) {
				if (str[i] != 'F') {
					dp[i + 1][j + 1][k] = max(dp[i + 1][j + 1][k], dp[i][j][k] + (k == 0 ? -1 : 1));
				} else dp[i + 1][j][k] = max(dp[i + 1][j][k], dp[i][j][k] + (k == 0 ? -1 : 1));
				if (str[i] != 'T') {
					dp[i + 1][j + 1][k ^ 1] = max(dp[i + 1][j + 1][k ^ 1], dp[i][j][k]);
				} else {
					dp[i + 1][j][k ^ 1] = max(dp[i + 1][j][k ^ 1], dp[i][j][k]);
				}
			}
		}
	}
	int ans = 0;
	for (int i = n; i >= 0; i -= 2) {
		ans = max(ans, max(dp[len][i][0], dp[len][i][1]));
	}
	printf("%d\n", ans); 
}

int main() {
	scanf("%s%d", str, &n);
	solve();
	return 0;
}