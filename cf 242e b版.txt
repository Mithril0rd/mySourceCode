#include <cstdio>
#include <cstring>
#include <algorithm>
#define lson l, mid, rt << 1
#define rson mid + 1, r, rt << 1 | 1
typedef long long ll;
const int H = 61;
const int N = 100000 + 10;
struct node {
	int val[H], len;
	ll Xor;
}seg[N << 2];

void Up(node& fa, node& ls, node& rs) {
	for (int i = 0; i < H; ++i)
		fa.val[i] = ls.val[i] + rs.val[i];
}
void Down(node& fa, node& ls, node& rs) {
	if (fa.Xor > 0) {
		for (int i = 0; i < H; ++i)
			if (fa.Xor >> i & 1) {
				ls.val[i] = ls.len - ls.val[i];
				rs.val[i] = rs.len - rs.val[i];
			}
		ls.Xor ^= fa.Xor;
		rs.Xor ^= fa.Xor;
		fa.Xor = 0;
	}
}
void build(int l, int r, int rt) {
	seg[rt].Xor = 0;
	seg[rt].len = r - l + 1;
	if (l == r) {
		ll x;
		scanf("%I64d", &x);
		for (int i = 0; i < H; ++i)
			if (x >> i & 1)
				seg[rt].val[i] = 1;
			else
				seg[rt].val[i] = 0;
		return ;
	}
	int mid = (l + r) >> 1;
	build(lson);
	build(rson);
	Up(seg[rt], seg[rt << 1], seg[rt << 1 | 1]);
}
void update(int L, int R, ll v, int l, int r, int rt) {
	if (L <= l && R >= r) {
		for (int i = 0; i < H; ++i)
			if (v >> i & 1)
				seg[rt].val[i] = seg[rt].len - seg[rt].val[i];
		seg[rt].Xor ^= v;
		return ;	
	} 
	int mid = (l + r) >> 1;
	Down(seg[rt], seg[rt << 1], seg[rt << 1 | 1]);
	if (R <= mid)
		update(L, R, v, lson);
	else if (L > mid)
		update(L, R, v, rson);
	else {
		update(L, mid, v, lson);
		update(mid + 1, R, v, rson);
	}
	Up(seg[rt], seg[rt << 1], seg[rt << 1 | 1]);	
}
ll query(int L, int R, int l, int r, int rt) {
	if (L <= l && R >= r) {
		ll re = 0;
		for (int i = 0; i < H; ++i)
			re = re + seg[rt].val[i] * (1ll << i);
		return re;	
	} 
	int mid = (l + r) >> 1;
	Down(seg[rt], seg[rt << 1], seg[rt << 1 | 1]);
	if (R <= mid)
		return query(L, R, lson);
	else if (L > mid)
		return query(L, R, rson);
	else 
		return query(L, mid, lson) + query(mid + 1, R, rson);
}
int main() {
	int n;
	scanf("%d", &n);
	build(1, n, 1);
	int Q, typ, l, r, x;
	scanf("%d", &Q);
	while (Q -- > 0) {
		scanf("%d", &typ);
		if (1 == typ) {
			scanf("%d%d", &l, &r);
			printf("%I64d\n", query(l, r, 1, n, 1));
		} else {
			scanf("%d%d%d", &l, &r, &x);
			update(l, r, x, 1, n, 1);
		}
	}
	return 0;
}