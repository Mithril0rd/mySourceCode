#include <cstdio>
#include <cstring>
#include <iostream>
#include <algorithm>

using namespace std;

typedef long long ll;
const ll INF = (ll)(1e15);
const int MAX_N = 4001;

struct Node {
	int dis, id;
	bool operator < (const Node &rhs) const {
		return dis < rhs.dis;
	}
} a[MAX_N], b[MAX_N];

int n, m;
int ans[MAX_N];
ll dp[MAX_N];
bool path[MAX_N][MAX_N];

void print(int x, int y) {
	if (x == -1 || y == -1) return ;
	print(x - 1, y - path[x][y]);
	ans[a[x].id] = b[y].id;
}

void solve() {
	sort(a, a + n); sort(b, b + m);
	fill(dp, dp + m, INF);
	dp[0] = abs(a[0].dis - b[0].dis);
	for (int i = 1; i < n; ++i) {
		for (int j = min(i, m - 1); j >= 0; --j) {
			if (j == 0 || dp[j - 1] > dp[j]) {
				path[i][j] = 0;
			} else {
				dp[j] = dp[j - 1];
				path[i][j] = 1;
			}
			dp[j] += abs(a[i].dis - b[j].dis);
		}
	}
	printf("%lld\n", dp[m - 1]);
	print(n - 1, m - 1);
	for (int i = 1; i <= n; ++i) {
		if (i == 1) printf("%d", ans[i]);
		else printf(" %d", ans[i]);
	}
	puts("");
}

int main() {
	while (1 == scanf("%d", &n)) {
		for (int i = 0; i < n; ++i) {
			scanf("%d", &a[i].dis);
			a[i].id = i + 1;
		} 
		scanf("%d", &m);
		for (int i = 0; i < m; ++i) {
			scanf("%d", &b[i].dis);
			b[i].id = i + 1; 
		} 
		solve(); 
	}
	return 0;
}