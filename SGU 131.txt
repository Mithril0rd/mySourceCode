#include <cstdio>
#include <cstring>

const int MAX_N = 10;

int n, m, limit;
long long dp[1 << MAX_N], f[1 << MAX_N];

void dfs(int pre, int cur, long long add) {
	 if (pre == limit - 1) {
	 	dp[cur] += add;
		return ; 
	 } 
	  
  	 for (int i = 0; i < m; ++i) {
  	  	 if (pre >> i & 1) continue;
  	 	 // @@
    	 	 // ..
  	 	 if (i + 1 < m && !(pre >> (i + 1) & 1)) {
  	   	 	int s1 = pre | (1 << i) | (1 << (i + 1));
  	   		dfs(s1, cur, add);
  	 	 }
  	 	 // @.
    	 	 // @.
  	 	 if (!(cur >> i & 1)) {
  	 	 	int s1 = pre | (1 << i);
	 	   	int s2 = cur | (1 << i);
 	   	 	dfs(s1, s2, add);
  	 	 }
  	 	 // @@
    	 	 // @.
  	 	 if (i + 1 < m && !(pre >> (i + 1) & 1) && !(cur >> i & 1)) {
  	 	 	int s1 = pre | (1 << i) | (1 << (i + 1));
	 	   	int s2 = cur | (1 << i);
 	   	 	dfs(s1, s2, add);
  	 	 }
 		 // @@
    	 	 // .@
  	 	 if (i + 1 < m && !(pre >> (i + 1) & 1) && !(cur >> (i + 1) & 1)) {
  	 	 	int s1 = pre | (1 << i) | (1 << (i + 1));
			int s2 = cur | (1 << (i + 1));
   			dfs(s1, s2, add);
  	 	 }
 	 	 // @.
    	 	 // @@
 	 	 if (i + 1 < m && !(cur >> i & 1) && !(cur >> (i + 1) & 1)) {
 	 	 	int s1 = pre | (1 << i);
	 	   	int s2 = cur | (1 << i) | (1 << (i + 1));
 	   	 	dfs(s1, s2, add);
 	 	 }
	  	 // .@
    	 	 // @@
  	  	 if (i > 0 && !(cur >> i & 1) && !(cur >> (i - 1) & 1)) {
   	   	 	  int s1 = pre | (1 << i);
   	   		  int s2 = cur | (1 << i) | (1 << (i - 1));
   	   		  dfs(s1, s2, add);
  	  	 }
   	   	 break;
  	 }
}

void solve() {
	 limit = 1 << m;
  	 f[limit - 1] = 1;
	 for (int i = 0; i <= n; ++i) {
	  	 for (int j = 0; j < limit; ++j) {
	 	 	 if (f[j]) {
	  		 	dfs(j, 0, f[j]);
	 	 	 }
	  	 }
  	  	 for (int j = 0; j < limit; ++j) {
  		   	 f[j] = dp[j];
     	   	 dp[j] = 0;
  	  	 }
	 }
  	 printf("%I64d\n", f[0]);
}

int main() {
	scanf("%d%d", &n, &m);
	solve();
	return 0;
} 