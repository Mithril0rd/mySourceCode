#include <cstdio>
#include <string>
#include <iostream>
#include <algorithm>
// UVA 11404
using namespace std;

const int MAX_N = 1001;

struct Info {
	int l;
	string lcs;
} dp[MAX_N][MAX_N];

string a, b;

void solve() {
	int len = a.size();
	b = "";
	for (int i = len - 1; i >= 0; --i) {
		b += a[i];
		dp[i][0].l = dp[0][i].l = 0;
		dp[i][0].lcs = dp[0][i].lcs = "";
	}
	dp[len][0].l = dp[0][len].l = 0;
	dp[len][0].lcs = dp[0][len].lcs = "";
	for (int i = 1; i <= len; ++i) {
		for (int j = 1; j <= len; ++j) {
			if (a[i-1] == b[j-1]) {
				dp[i][j].l = dp[i-1][j-1].l + 1;
				dp[i][j].lcs = dp[i-1][j-1].lcs + a[i-1];
			} else {
				if (dp[i-1][j].l > dp[i][j-1].l) {
					dp[i][j].l = dp[i-1][j].l;
					dp[i][j].lcs = dp[i-1][j].lcs;
				} else if (dp[i-1][j].l < dp[i][j-1].l) {
					dp[i][j].l = dp[i][j-1].l;
					dp[i][j].lcs = dp[i][j-1].lcs;
				} else {
					dp[i][j].l = dp[i][j-1].l;
					dp[i][j].lcs = min(dp[i-1][j].lcs, dp[i][j-1].lcs);
				}
			}
		}
	}
	string t = dp[len][len].lcs;
	for (int i = 0; i < dp[len][len].l >> 1; ++i) {
		cout << t[i];
	}// ÆæÅ¼Çé¿ö
	if (dp[len][len].l & 1) {
		for (int i = dp[len][len].l >> 1; i >= 0; --i) {
			cout << t[i];
		}
	} else {
		for (int i = (dp[len][len].l >> 1) - 1; i >= 0; --i) {
			cout << t[i];
		}
	}
	puts("");
}

int main() {
	while (cin >> a) {
		solve();
	}
	return 0;
}

