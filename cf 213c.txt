#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std; 

const int MAX_N = 301;
const int INF = 0x3f3f3f3f;
const int dir[4][2] = {0,0, 0,1, 1,0, 1,1};

int n;
int dp[MAX_N << 1][MAX_N][MAX_N];
int mat[MAX_N][MAX_N];

void solve() {
	int m = n;
	int limit = m << 1;
	for (int i = 0; i < limit; ++i) {
		for (int j = 0; j <= n; ++j) {
			for (int k = 0; k <= n; ++k) {
				dp[i][j][k] = -INF;
			}
		}
	}
	dp[0][1][1] = mat[1][1];
	for (int i = 1; i < limit - 1; ++i) {
		for (int j = 1; j <= n && j <= i + 1; ++j) {
			for (int k = j; k <= n && k <= i + 1; ++k) {
				for (int l = 0; l < 4; ++l) {
					dp[i][j][k] = max(dp[i][j][k], dp[i -1][j - dir[l][0]][k - dir[l][1]]);
				} 
				dp[i][j][k] += mat[j][i - j + 2] + mat[k][i - k + 2] - (j == k ? mat[j][i - j + 2] : 0);
			}
		}
	}
	
	printf("%d\n", dp[limit - 2][n][n]);
}

int main() {
	scanf("%d", &n);
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= n; ++j) {
			scanf("%d", &mat[i][j]);
		}
	}
	solve();
	return 0;
}